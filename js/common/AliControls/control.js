/*
易上弘js控件 底层支持js
*/
define(['js/common/AliControls/control-base'], function (require, exports, module) {
    var Alipw = require('js/common/AliControls/control-base');
    Alipw.BorderContainer = Alipw.extend(Alipw.Container, { baseCls: "alipw-bordercontainer", constructor: function () { Alipw.BorderContainer.superclass.constructor.apply(this, arguments) }, initialize: function () { Alipw.BorderContainer.superclass.initialize.apply(this, arguments) }, commitProperties: function () { Alipw.BorderContainer.superclass.commitProperties.apply(this, arguments) }, createDom: function () { Alipw.BorderContainer.superclass.createDom.apply(this, arguments); this.el.append(new Alipw.Template(['<div class="{$baseCls}-wrap">', '<div class="{$baseCls}-header">', '<div class="{$baseCls}-header-left">', '<div class="{$baseCls}-header-right">', '<div class="{$baseCls}-header-center">', "</div>", "</div>", "</div>", "</div>", '<div class="{$baseCls}-body">', '<div class="{$baseCls}-body-left">', '<div class="{$baseCls}-body-right">', '<div class="{$baseCls}-body-center">', '<div class="{$baseCls}-body-content"></div>', "</div>", "</div>", "</div>", "</div>", '<div class="{$baseCls}-footer">', '<div class="{$baseCls}-footer-left">', '<div class="{$baseCls}-footer-right">', '<div class="{$baseCls}-footer-center">', "</div>", "</div>", "</div>", "</div>", "</div>"]).set({ baseCls: this.baseCls }).compile()) }, renderComplete: function () { Alipw.BorderContainer.superclass.renderComplete.apply(this, arguments) }, getWidthByBody: function (a) { return a + (this.getWidth() - this.getBody().width()) }, getHeightByBody: function (a) { return a + (this.getHeight() - this.getBody().height()) }, _doLayout: function () { Alipw.BorderContainer.superclass._doLayout.apply(this, arguments); var a = this.getBody(); var c = this.el.find("." + this.baseCls + "-wrap"); if (this.autoHeight) { this.height = null; this.el.css("height", "auto"); a.css("height", "auto"); if (this.minHeight && this.getHeight() < this.minHeight) { this.height = this.minHeight } if (this.maxHeight && this.getHeight() > this.maxHeight) { this.height = this.maxHeight } } if (this.height) { a.height(10); var b = c.outerHeight(true) - a.height(); a.height(this.height - b) } if (this.width) { a.css("width", "auto"); var d = c.outerWidth(true) - a.width(); a.width(this.width - d) } }, remove: function () { Alipw.BorderContainer.superclass.remove.apply(this, arguments) }, getBody: function () { if (!this.__getBodyCache) { this.__getBodyCache = this.el.find("." + this.baseCls + "-body-content"); this.addEventListener("destroy", function () { this.__getBodyCache = null }, this) } return this.__getBodyCache } }); Alipw.ResizeSupporter = Alipw.extend(Alipw.Nonvisual, { target: "", minWidth: 16, minHeight: 16, maxWidth: "", maxHeight: "", constructor: function () { Alipw.ResizeSupporter.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.ResizeSupporter.superclass.commitProperties.apply(this, arguments); if (this.target instanceof Alipw.Component) { this.targetEl = this.target.el } else { this.targetEl = Alipw.convertEl(this.target) } }, initialize: function () { Alipw.ResizeSupporter.superclass.initialize.apply(this, arguments); if (this.targetEl.css("position") == "static") { this.targetEl.addClass("alipw-resizesupporter") } this.topLeftCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-top-left"></div>'); this.topCenterCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-top-center"></div>'); this.topRightCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-top-right"></div>'); this.middleLeftCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-middle-left"></div>'); this.middleRightCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-middle-right"></div>'); this.bottomLeftCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-bottom-left"></div>'); this.bottomCenterCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-bottom-center"></div>'); this.bottomRightCorner = jQuery('<div class="alipw-resizesupporter-edge alipw-resizesupporter-edge-bottom-right"></div>'); this.targetEl.append(this.topCenterCorner).append(this.middleLeftCorner).append(this.middleRightCorner).append(this.bottomCenterCorner).append(this.topLeftCorner).append(this.topRightCorner).append(this.bottomLeftCorner).append(this.bottomRightCorner); this.topLeftCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.topCenterCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.topRightCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.middleLeftCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.middleRightCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.bottomLeftCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.bottomCenterCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); this.bottomRightCorner.bind("mousedown", jQuery.proxy(this.getReady_ResizeSupporter, this)); var c = Alipw.createFuncProxy(this.move_ResizeSupporter, this); var b = Alipw.createFuncProxy(this.release_ResizeSupporter, this); jQuery(document).bind("mousemove", c); jQuery(document).bind("mouseup", b); this.addEventListener("destroy", function () { jQuery(document).unbind("mousemove", c); jQuery(document).unbind("mouseup", b) }, this); if (parseInt(Alipw.ie()) < 7) { var a = function () { this.middleRightCorner.height(this.targetEl.height()); this.middleLeftCorner.height(this.targetEl.height()); this.topCenterCorner.width(this.targetEl.width()); this.bottomCenterCorner.width(this.targetEl.width()) }; a.call(this); this.targetEl.bind("resize", jQuery.proxy(a, this)); this.addEventListener("destroy", function () { this.targetEl.unbind("resize", a) }, this) } }, enable: function () { Alipw.ResizeSupporter.superclass.enable.apply(this, arguments); this.topLeftCorner.show(); this.topCenterCorner.show(); this.topRightCorner.show(); this.middleLeftCorner.show(); this.middleRightCorner.show(); this.bottomLeftCorner.show(); this.bottomCenterCorner.show(); this.bottomRightCorner.show() }, disable: function () { Alipw.ResizeSupporter.superclass.disable.apply(this, arguments); this.topLeftCorner.hide(); this.topCenterCorner.hide(); this.topRightCorner.hide(); this.middleLeftCorner.hide(); this.middleRightCorner.hide(); this.bottomLeftCorner.hide(); this.bottomCenterCorner.hide(); this.bottomRightCorner.hide() }, getReady_ResizeSupporter: function (f) { if (!this.enabled) { return } f.preventDefault(); f.stopPropagation(); if (f.currentTarget.setCapture) { f.currentTarget.setCapture() } else { if (window.captureEvents) { window.captureEvents(Event.MOUSEMOVE | Event.MOUSEUP) } } this.ready = true; if (f.currentTarget.className.indexOf("edge-top-left") != -1) { this.type = "nw" } else { if (f.currentTarget.className.indexOf("edge-top-center") != -1) { this.type = "n" } else { if (f.currentTarget.className.indexOf("edge-top-right") != -1) { this.type = "ne" } else { if (f.currentTarget.className.indexOf("edge-middle-left") != -1) { this.type = "w" } else { if (f.currentTarget.className.indexOf("edge-middle-right") != -1) { this.type = "e" } else { if (f.currentTarget.className.indexOf("edge-bottom-left") != -1) { this.type = "sw" } else { if (f.currentTarget.className.indexOf("edge-bottom-center") != -1) { this.type = "s" } else { if (f.currentTarget.className.indexOf("edge-bottom-right") != -1) { this.type = "se" } } } } } } } } var h, b, a, g; if (this.target instanceof Alipw.Component) { h = this.target.getWidth(); b = this.target.getHeight(); targetX = this.target.getX(); g = this.target.getY() } else { h = this.targetEl.width(); b = this.targetEl.height(); targetX = this.targetEl.offset().left; g = this.targetEl.offset().top } var j = [targetX, g]; var i = [targetX + h, g]; var c = [targetX, g + b]; var d = [targetX + h, g + b]; this.originalPoints = [j, i, c, d]; if (this.target instanceof Alipw.Component && this.target.position == "fixed") { this.anchor = [f.clientX, f.clientY] } else { this.anchor = [f.pageX, f.pageY] } }, move_ResizeSupporter: function (g) { if (!this.enabled || !this.ready) { return } g.preventDefault(); if (!this.resizing) { this.resizing = true; if (!this.resizeProxy) { this.resizeProxy = new Alipw.BorderContainer({ cls: "alipw-resizeproxy", width: this.targetEl.width(), height: this.targetEl.height(), floating: true, position: (this.target instanceof Alipw.Component) ? this.target.position : "" }); this.addEventListener("destroy", function () { if (this.resizeProxy) { this.resizeProxy.destroy(); this.resizeProxy = null } }, this) } this.resizeProxy.el.css("cursor", this.type + "-resize"); Alipw.ComponentManager.bringToFront(this.resizeProxy); this.resizeProxy.show(); this.resizeProxy.setPosition(this.originalPoints[0][0], this.originalPoints[0][1]) } var c = this.resizeProxy.position == "fixed" ? [g.clientX, g.clientY] : [g.pageX, g.pageY]; var d, j, i, b, a; if (this.type == "se") { d = c[0] - this.originalPoints[0][0] + (this.originalPoints[3][0] - this.anchor[0]); j = c[1] - this.originalPoints[0][1] + (this.originalPoints[3][1] - this.anchor[1]) } else { if (this.type == "s") { j = c[1] - this.originalPoints[0][1] + (this.originalPoints[3][1] - this.anchor[1]) } else { if (this.type == "e") { d = c[0] - this.originalPoints[0][0] + (this.originalPoints[3][0] - this.anchor[0]) } else { if (this.type == "nw") { d = this.originalPoints[3][0] - c[0] + (this.anchor[0] - this.originalPoints[0][0]); j = this.originalPoints[3][1] - c[1] + (this.anchor[1] - this.originalPoints[0][1]); b = true; a = true; i = this.originalPoints[3] } else { if (this.type == "n") { j = this.originalPoints[3][1] - c[1] + (this.anchor[1] - this.originalPoints[0][1]); a = true; i = this.originalPoints[2] } else { if (this.type == "w") { d = this.originalPoints[3][0] - c[0] + (this.anchor[0] - this.originalPoints[0][0]); b = true; i = this.originalPoints[1] } else { if (this.type == "sw") { d = this.originalPoints[1][0] - c[0] + (this.anchor[0] - this.originalPoints[2][0]); j = c[1] - this.originalPoints[1][1] + (this.originalPoints[2][1] - this.anchor[1]); b = true; i = this.originalPoints[1] } else { if (this.type == "ne") { d = c[0] - this.originalPoints[2][0] + (this.originalPoints[1][0] - this.anchor[0]); j = this.originalPoints[2][1] - c[1] + (this.anchor[1] - this.originalPoints[1][1]); a = true; i = this.originalPoints[2] } } } } } } } } if (this.minWidth && d < this.minWidth) { d = this.minWidth } else { if (this.maxWidth && d > this.maxWidth) { d = this.maxWidth } } if (this.minHeight && j < this.minHeight) { j = this.minHeight } else { if (this.maxHeight && j > this.maxHeight) { j = this.maxHeight } } var h = b ? this.resizeProxy.setPosition(i[0] - d) : null; var f = a ? this.resizeProxy.setPosition(null, i[1] - j) : null; if (Alipw.isSet(d)) { this.resizeProxy.setWidth(d) } if (Alipw.isSet(j)) { this.resizeProxy.setHeight(j) } if (Alipw.isSet(h) || Alipw.isSet(f)) { this.resizeProxy.setPosition(h, f) } }, release_ResizeSupporter: function (a) { if (!this.enabled || !this.ready) { return } if (a.currentTarget.releaseCapture) { a.currentTarget.releaseCapture() } else { if (window.releaseEvents) { window.releaseEvents(Event.MOUSEMOVE | Event.MOUSEUP) } } if (this.resizing) { this.resizing = false; if (this.target instanceof Alipw.Component) { this.target.setWidth(this.resizeProxy.getWidth()); this.target.setHeight(this.resizeProxy.getHeight()); if (this.target.el.css("position") == "fixed" || this.target.el.css("position") == "absolute") { this.target.setPosition(this.resizeProxy.getX(), this.resizeProxy.getY()) } } else { this.targetEl.width(this.resizeProxy.getWidth() - (this.targetEl.outerWidth() - this.targetEl.width())); this.targetEl.height(this.resizeProxy.getHeight() - (this.targetEl.outerHeight() - this.targetEl.height())); if (this.targetEl.css("position") == "fixed" || this.targetEl.css("position") == "absolute") { this.targetEl.offset({ x: this.resizeProxy.getX(), y: this.resizeProxy.getY() }) } } } if (this.resizeProxy) { this.resizeProxy.setVisible(false) } this.ready = false }, getHandledPosition_ResizeSupporter: function (b, h) { var j = jQuery(window); var c = j.width(); var d = j.height(); var f = Alipw.getDocWidth(); var k = Alipw.getDocHeight(); var i, e; i = this.targetEl.outerWidth(); e = this.targetEl.outerHeight(); if (this.target.position == "fixed") { if (b < 10) { b = 10 } else { if (b + i > c - 10) { b = c - i - 10 } } if (h < 10) { h = 10 } else { if (h + e > d - 10) { h = d - e - 10 } } } else { var a = c > f ? c : f; var g = d > k ? d : k; if (b < 10) { b = 10 } else { if (b + i > a - 10) { b = a - i - 10 } } if (h < 10) { h = 10 } else { if (h + e > g - 10) { h = g - e - 10 } } } return [b, h] } }); Alipw.DragSupporter = Alipw.extend(Alipw.Nonvisual, { target: "", dragEl: "", useProxy: true, draggable: true, droppable: false, draggingCls: "alipw-component-dragging", enabled: true, constructor: function () { Alipw.DragSupporter.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.DragSupporter.superclass.commitProperties.apply(this, arguments); if (this.target instanceof Alipw.Component) { this.targetEl = this.target.el } else { this.targetEl = Alipw.convertEl(this.target) } }, initialize: function () { Alipw.DragSupporter.superclass.initialize.apply(this, arguments); if (this.targetEl[0]) { var a = this.dragEl ? jQuery(this.dragEl) : this.targetEl; a.bind("mousedown", jQuery.proxy(this.getReady, this)); jQuery(document).bind("mousemove", jQuery.proxy(this.move, this)); jQuery(document).bind("mouseup", jQuery.proxy(this.release, this)) } }, getReady: function (a) { if (!this.enabled) { return } a.preventDefault(); this.ready = true; this._dx = this.targetEl.offset().left - a.pageX; this._dy = this.targetEl.offset().top - a.pageY }, move: function (a) { if (!this.enabled || !this.ready) { return } a.preventDefault(); if (!this.dragging) { this.dragging = true; if (this.useProxy) { if (!this.proxy) { this.proxy = new Alipw.BorderContainer({ cls: "alipw-dragproxy", floating: true, position: (this.target instanceof Alipw.Component) ? this.target.position : "" }); this.addEventListener("destroy", function () { if (this.proxy) { this.proxy.destroy(); this.proxy = null } }, this) } this.proxy.show(); this.proxy.setWidth(this.targetEl.width()); this.proxy.setHeight(this.targetEl.height()); Alipw.ComponentManager.bringToFront(this.proxy) } else { if (this.draggingCls) { this.targetEl.addClass(this.draggingCls) } } if (this.target instanceof Alipw.Component) { this.originalPosition = [this.target.getX(), this.target.getY()]; this.target.fireEvent("dragstart", {}, false) } else { this.originalPosition = [this.targetEl.offset().left, this.targetEl.offset().top]; this.targetEl.triggerHandler("alipw-dragstart") } } if (this.target instanceof Alipw.Component) { if (this.target.position == "fixed") { this._currCoord = this.getHandledPosition_DragSupporter(a.clientX + this._dx, a.clientY + this._dy); (this.proxy || this.target).setPosition(this._currCoord[0], this._currCoord[1], null, false) } else { this._currCoord = this.getHandledPosition_DragSupporter(a.pageX + this._dx, a.pageY + this._dy); (this.proxy || this.target).el.offset({ left: this._currCoord[0], top: this._currCoord[1] }) } this.target.fireEvent("drag", { left: this._currCoord[0], top: this._currCoord[1] }, false) } else { this._currCoord = this.getHandledPosition_DragSupporter(a.pageX + this._dx, a.pageY + this._dy); if (this.proxy) { this.proxy.el.offset({ left: this._currCoord[0], top: this._currCoord[1] }) } else { this.targetEl.offset({ left: this._currCoord[0], top: this._currCoord[1] }) } this.targetEl.triggerHandler("alipw-drag", { left: this._currCoord[0], top: this._currCoord[1] }) } }, release: function (a) { if (!this.enabled) { return } if (this.dragging) { this.dragging = false; if (this.target instanceof Alipw.Component) { this.target.setPosition(this.originalPosition[0], this.originalPosition[1], null, false); this.target.fireEvent("dragend", { left: this._currCoord[0], top: this._currCoord[1] }, false) } else { this.targetEl.offset({ left: this.originalPosition[0], top: this.originalPosition[1] }); this.targetEl.triggerHandler("alipw-dragend", { left: this._currCoord[0], top: this._currCoord[1] }) } } if (this.draggingCls) { this.targetEl.removeClass(this.draggingCls) } if (this.proxy) { this.proxy.setVisible(false) } this.dragging = false; this.ready = false }, getHandledPosition_DragSupporter: function (b, h) { var j = jQuery(window); var c = j.width(); var d = j.height(); var f = Alipw.getDocWidth(); var k = Alipw.getDocHeight(); var i, e; i = this.targetEl.outerWidth(); e = this.targetEl.outerHeight(); if (this.target.position == "fixed") { if (b + i > c - 10) { b = c - i - 10 } if (b < 10) { b = 10 } if (h + e > d - 10) { h = d - e - 10 } if (h < 10) { h = 10 } } else { var a = c > f ? c : f; var g = d > k ? d : k; if (b + i > a - 10) { b = a - i - 10 } if (b < 10) { b = 10 } if (h + e > g - 10) { h = g - e - 10 } if (h < 10) { h = 10 } } return [b, h] } }); Alipw.Button = Alipw.extend(Alipw.BoxComponent, { handler: null, scope: null, minHeight: 22, minWidth: 10, maxHeight: 65, iconCls: "", label: "Button", baseCls: "alipw-button", defaultEl: "a", constructor: function () { Alipw.Button.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.Button.superclass.commitProperties.apply(this, arguments) }, initialize: function () { Alipw.Button.superclass.initialize.apply(this, arguments) }, createDom: function () { Alipw.Button.superclass.createDom.apply(this, arguments); this.el.attr("href", "#"); this.el.append(["<table>", '<tr class="' + this.baseCls + '-top">', '<td class="' + this.baseCls + '-left"></td>', '<td class="' + this.baseCls + '-center"></td>', '<td class="' + this.baseCls + '-right"></td>', "</tr>", '<tr class="' + this.baseCls + '-middle">', '<td class="' + this.baseCls + '-left"></td>', '<td class="' + this.baseCls + '-center">', '<span class="' + this.baseCls + '-icon"></span>', '<span class="' + this.baseCls + '-text"></span>', "</td>", '<td class="' + this.baseCls + '-right"></td>', "</tr>", '<tr class="' + this.baseCls + '-bottom">', '<td class="' + this.baseCls + '-left"></td>', '<td class="' + this.baseCls + '-center"></td>', '<td class="' + this.baseCls + '-right"></td>', "</tr>", "</table>"].join("")); this.addEventListener("click", this.defaultClickHandler, this, true); if (this.handler) { this.addEventListener("click", this.handler, this.scope || this, true) } }, renderComplete: function () { Alipw.Button.superclass.renderComplete.apply(this, arguments); this.el.find("." + this.baseCls + "-text").html(this.label); this.setIconCls(this.iconCls); if (this.label) { this.el.find("." + this.baseCls + "-text").show() } else { this.el.find("." + this.baseCls + "-text").hide() } }, _doLayout: function () { Alipw.Button.superclass._doLayout.apply(this, arguments); if (this.width) { this.el.find("." + this.baseCls + "-middle ." + this.baseCls + "-center").width(this.width - this.el.find("." + this.baseCls + "-left").width() - this.el.find("." + this.baseCls + "-right").width()) } if (this.height) { this.el.find("." + this.baseCls + "-middle ." + this.baseCls + "-center").height(this.height - this.el.find("." + this.baseCls + "-top").height() - this.el.find("." + this.baseCls + "-bottom").height()) } }, setIconCls: function (b) { var a = this.el.find("." + this.baseCls + "-icon"); if (this.iconCls) { a.removeClass(this.iconCls) } this.iconCls = b; a.addClass(b); if (b) { a.show() } else { a.hide() } }, defaultClickHandler: function (a) { a.preventDefault() } }); Alipw.Panel = Alipw.extend(Alipw.Container, { baseCls: "alipw-panel", showHeader: true, closable: false, closeAction: "remove", closeBtnConfig: {}, minWidth: 200, minHeight: 150, width: 200, height: 150, title: "", buttons: "", buttonAlign: "center", buttonGap: 6, constructor: function () { Alipw.Panel.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.Panel.superclass.commitProperties.apply(this, arguments) }, initialize: function () { Alipw.Panel.superclass.initialize.apply(this, arguments); this.headerButtonItems = new Array(); this.buttonItems = new Array() }, createDom: function () { Alipw.Panel.superclass.createDom.apply(this, arguments); this.el.append(['<div class="' + this.baseCls + '-wrap">', '<div class="' + this.baseCls + '-header">', '<span class="' + this.baseCls + '-header-left">', '<span class="' + this.baseCls + '-header-right">', '<span class="' + this.baseCls + '-header-center">', '<span class="' + this.baseCls + '-header-text">', '<span class="' + this.baseCls + '-header-text-shadow"></span>', '<span class="' + this.baseCls + '-header-text-fore"></span>', "</span>", '<div class="' + this.baseCls + '-header-buttons"></div>', "</span>", "</span>", "</span>", "</div>", '<div class="' + this.baseCls + '-body-wrap">', '<div class="' + this.baseCls + '-body-left">', '<div class="' + this.baseCls + '-body-right">', '<div class="' + this.baseCls + '-body">', '<div class="' + this.baseCls + '-body-content">', "</div>", '<div class="' + this.baseCls + '-body-buttonbar">', "</div>", "</div>", "</div>", "</div>", "</div>", '<div class="' + this.baseCls + '-footer">', '<span class="' + this.baseCls + '-footer-left">', '<span class="' + this.baseCls + '-footer-right">', '<span class="' + this.baseCls + '-footer-center"></span>', "</span>", "</span>", "</div>", "</div>"].join("")); this.header = this.el.find("." + this.baseCls + "-header"); this.body = this.getBody(); this.footer = this.el.find("." + this.baseCls + "-footer"); this.buttonBar = this.el.find("." + this.baseCls + "-body-buttonbar"); this.bodyWrap = this.el.find("." + this.baseCls + "-body-wrap"); this.addEventListener("destroy", function () { this.headerButtonItems = null; this.buttonItems = null }, this) }, renderComplete: function () { Alipw.Panel.superclass.renderComplete.apply(this, arguments); this.setTitle(this.title); this.renderHeaderBtns(); if (this.buttons instanceof Array && this.buttons.length > 0) { this.addButtons(this.buttons) } }, _doLayout: function () { Alipw.Panel.superclass._doLayout.apply(this, arguments); var b = this.el.find("." + this.baseCls + "-wrap"); if (this.showHeader) { b.removeClass(this.baseCls + "-noheader") } else { b.addClass(this.baseCls + "-noheader") } if (this.buttonItems.length > 0) { this.buttonBar.css("text-align", this.buttonAlign); this.buttonBar.show() } else { this.buttonBar.hide() } var b = this.el.find("." + this.baseCls + "-wrap"); var a = b.outerHeight(); var c = b.outerWidth(); if (this.height) { this.body.height(this.height - (a - this.body.height())) } if (this.width) { this.body.width("auto"); this.body.width(this.width - (c - this.body.width())) } }, setTitle: function (a) { this.el.find("." + this.baseCls + "-header-text-shadow").html(a); this.el.find("." + this.baseCls + "-header-text-fore").html(a) }, renderHeaderBtns: function () { if (this.closable) { if (!this.closeBtn) { this.closeBtn = new Alipw.Button(jQuery.extend({ cls: "button-alipw-panel-header-red alipw-panel-btn-close", iconCls: "icon-alipw-panel-closeBtn", label: "", width: 45, height: 22, inlineStyle: { "margin-right": "-1px" }, renderTo: this.el.find("." + this.baseCls + "-header-buttons"), handler: this.closeBtnHandler, scope: this }, this.closeBtnConfig)); this.headerButtonItems.push(this.closeBtn); this.closeBtn.addEventListener("mousedown", function (a) { a.preventDefault(); a.stopPropagation() }, this, true) } } if (this.headerButtonItems.length < 1) { this.el.find("." + this.baseCls + "-header-buttons").hide() } else { this.el.find("." + this.baseCls + "-header-buttons").show() } }, close: function () { this.fireEvent("beforeClose", {}, false); if (this.closeAction == "remove") { this.destroy() } else { if (this.closeAction = "hide") { this.setVisible(false) } } }, getWidthByBody: function (a) { return a + (this.getWidth() - this.body.width()) }, getHeightByBody: function (a) { return a + (this.getHeight() - this.body.height()) }, addButtons: function (b) { if (b instanceof Array) { for (var d = 0, a = b.length; d < a; d++) { this.createButton(b[d]) } this.doLayout() } else { if (typeof (b) == "object") { var c = this.createButton(b); this.doLayout(); return c } } }, getButton: function (a) { }, getBody: function () { return this.el.find("." + this.baseCls + "-body-content") }, closeBtnHandler: function (a) { a.stopPropagation(); this.close() }, createButton: function (a) { var b = new Alipw.Button(jQuery.extend({ renderTo: this.buttonBar, width: 60, inlineStyle: { margin: "0 " + this.buttonGap / 2 + "px"} }, a)); this.buttonItems.push(b); b.ownerComp = this; return b }, createButtons_Panel: function () { this.addButtons(this.buttons) } }); Alipw.FixedWrapper = Alipw.extend(Alipw.Container, { floating: true, baseCls: "alipw-fixedWrapper", constructor: function () { Alipw.FixedWrapper.superclass.constructor.apply(this, arguments) }, initialize: function () { Alipw.FixedWrapper.superclass.initialize.apply(this, arguments) }, commitProperties: function () { Alipw.FixedWrapper.superclass.commitProperties.apply(this, arguments) }, createDom: function () { Alipw.FixedWrapper.superclass.createDom.apply(this, arguments); this.el.append(['<div class="' + this.baseCls + '-innerWrap"></div>'].join("")) }, renderComplete: function () { Alipw.FixedWrapper.superclass.renderComplete.apply(this, arguments); if (Alipw.useShims == true && Alipw.isIE6) { this.shim = $(['<iframe frameborder="0" class="' + this.baseCls + '-shim"></iframe>'].join("")); Alipw.getBody().append(this.shim) } var a = Alipw.createFuncProxy(this.resizeHandler_FixedWrapper, this); var b = Alipw.createFuncProxy(this.scrollHandler_FixedWrapper, this); jQuery(window).bind("resize", a); jQuery(window).bind("scroll", b); this.addEventListener("destroy", function (c) { jQuery(window).unbind("resize", a); jQuery(window).unbind("scroll", b); if (this.shim) { this.shim.remove(); this.shim = null } }, this); this.resizeHandler_FixedWrapper(); this.scrollHandler_FixedWrapper() }, remove: function () { Alipw.FixedWrapper.superclass.remove.apply(this, arguments) }, getBody: function () { return this.el.find("." + this.baseCls + "-innerWrap") }, resizeHandler_FixedWrapper: function () { if (Alipw.isIE6) { var b = jQuery(window).width(); var a = jQuery(window).height(); this.setWidth(b); this.setHeight(a); if (this.shim) { this.shim.attr({ width: b, height: a }); this.shim.css({ width: b + "px", height: a + "px" }) } } }, scrollHandler_FixedWrapper: function () { if (Alipw.isIE6) { var b = jQuery(document).scrollLeft(); var a = jQuery(document).scrollTop(); this.el.css({ left: b + "px", top: a + "px" }); if (this.shim) { this.shim.css({ left: b + "px", top: a + "px" }) } } } }); Alipw.ScreenMask = Alipw.extend(Alipw.FixedWrapper, { baseCls: "alipw-screenMask", opacity: 0.5, constructor: function () { Alipw.ScreenMask.superclass.constructor.apply(this, arguments) }, initialize: function () { Alipw.ScreenMask.superclass.initialize.apply(this, arguments) }, commitProperties: function () { Alipw.ScreenMask.superclass.commitProperties.apply(this, arguments) }, createDom: function () { Alipw.ScreenMask.superclass.createDom.apply(this, arguments) }, renderComplete: function () { Alipw.ScreenMask.superclass.renderComplete.apply(this, arguments); this.setOpacity(this.opacity) }, setOpacity: function (a) { this.el.css("opacity", a) }, remove: function () { Alipw.ScreenMask.superclass.remove.apply(this, arguments) } }); Alipw.WindowManager = function () { var b = new Array(); var a = { zseed: 8000, register: function (c) { if (c instanceof Alipw.Window) { b.push(c) } }, unregister: function (c) { Alipw.removeItemFromArray(c, b); if (b.length == 0) { } } }; return a } (); Alipw.AnimationProxy = Alipw.extend(Alipw.BoxComponent, { baseCls: "alipw-animationproxy", constructor: function () { Alipw.AnimationProxy.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.AnimationProxy.superclass.commitProperties.apply(this, arguments) }, initialize: function () { Alipw.AnimationProxy.superclass.initialize.apply(this, arguments) }, createDom: function () { Alipw.AnimationProxy.superclass.createDom.apply(this, arguments); this.setVisible(false) }, renderComplete: function () { Alipw.AnimationProxy.superclass.renderComplete.apply(this, arguments) }, _doLayout: function () { Alipw.AnimationProxy.superclass._doLayout.apply(this, arguments) }, animate: function (a, e, c, h, d, b) { var j = new Object(); var k = new Object(); var i = this.convertObjectToRect_AnimationProxy(a); j.width = i[2]; j.height = i[3]; j.left = i[0]; j.top = i[1]; j.opacity = c; var f = this.convertObjectToRect_AnimationProxy(e); k.width = f[2]; k.height = f[3]; k.left = f[0]; k.top = f[1]; k.opacity = h; this.el.stop(); this.setVisible(true); this.el.css({ width: j.width + "px", height: j.height + "px", left: j.left + "px", top: j.top + "px", opacity: j.opacity }); var g = this; this.el.animate(k, d, null, function () { g.setVisible(false); if (b instanceof Function) { b.call() } }) }, convertObjectToRect_AnimationProxy: function (b) { if (b instanceof Alipw.Component) { var c = b.el.offset(); return [c.left, c.top, b.el.outerWidth(), b.el.outerHeight()] } else { if (b instanceof jQuery || b.nodeType == 1 || b.nodeType == 9) { var a = jQuery(b); var c = a.offset(); return [c.left, c.top, a.outerWidth(), a.outerHeight()] } else { if (b instanceof Array) { return b } } } } }); Alipw.Window = Alipw.extend(Alipw.Panel, { subCls: "alipw-window", modal: false, modalOverlayOpacity: 0.3, closable: true, maximizable: false, minimizable: false, initPosition: "", draggable: true, resizable: true, floating: true, position: "fixed", showShadow: true, autoCenter: false, animated: false, taskbar: null, constructor: function () { Alipw.Window.superclass.constructor.apply(this, arguments) }, commitProperties: function () { Alipw.Window.superclass.commitProperties.apply(this, arguments); if (this.draggable === true) { this.draggable = { useProxy: false} } }, initialize: function () { Alipw.Window.superclass.initialize.apply(this, arguments); Alipw.WindowManager.register(this) }, createDom: function () { Alipw.Window.superclass.createDom.apply(this, arguments); this.animationProxy = new Alipw.AnimationProxy(); Alipw.getBody().append(this.animationProxy); this.addEventListener("destroy", function (a) { this.animationProxy.remove(); this.animationProxy = null }, this); this.addEventListener("creationComplete", this.completeHandler_Window, this); this.addEventListener("dragend", this.dragEndHandler_Window, this); this.addEventListener("drag", this.dragHandler_Window, this) }, renderComplete: function () { Alipw.Window.superclass.renderComplete.apply(this, arguments); if (this.draggable) { var b = typeof (this.draggable) == "object" ? this.draggable : {}; this.draggable = jQuery.extend({ dragEl: this.getDragEl_Window() }, b) } if (this.modal) { if (!this.modalOverlay) { this.modalOverlay = new Alipw.ScreenMask({ floatingManagement: false, opacity: this.modalOverlayOpacity }); this.addEventListener("destroy", function () { if (this.modalOverlay) { this.modalOverlay.destroy(); this.modalOverlay = null } }, this); this.modalOverlay.setPosition(null, null, this.zIndex - 2) } this.modalOverlay.show() } else { if (this.modalOverlay) { this.modalOverlay.setVisible(false) } } if (this.taskbar) { if (typeof (this.taskbar) == "string") { this.taskbar = Alipw.getComp(this.taskbar) } if (this.taskbar instanceof Alipw.Taskbar) { var a = this.taskbar.addItem(this); a.activate(); this.addEventListener("beforeClose", function () { this.taskbar.removeItem(this) }, this) } } this.addEventListener("visibilityChange", this.visibilityChangeHandler_Window, this); this.addEventListener("move", this.moveHandler_Window, this) }, destroy: function () { Alipw.WindowManager.unregister(this); Alipw.Window.superclass.destroy.apply(this, arguments) }, renderHeaderBtns: function () { if (this.minimizable && this.taskbar) { if (!this.minimizeBtn) { this.minimizeBtn = new Alipw.Button({ label: "", cls: "button-alipw-panel-header-grey alipw-panel-btn-min", width: 30, height: 22, inlineStyle: { "margin-right": "-1px" }, iconCls: "icon-alipw-panel-minimizeBtn", renderTo: this.el.find("." + this.baseCls + "-header-buttons"), handler: this.minimizeHandler_Window, scope: this }); if (this.closeBtn) { this.el.find("." + this.baseCls + "-header-buttons").append(this.closeBtn.el) } } } if (this.maximizable) { if (!this.maximizeBtn) { this.maximizeBtn = new Alipw.Button({ label: "", cls: "button-alipw-panel-header-grey alipw-panel-btn-max", width: 30, height: 22, inlineStyle: { "margin-right": "-1px" }, iconCls: "icon-alipw-panel-maximizeBtn", renderTo: this.el.find("." + this.baseCls + "-header-buttons"), handler: this.maximizeRestoreHandler_Window, scope: this }); if (this.closeBtn) { this.el.find("." + this.baseCls + "-header-buttons").append(this.closeBtn.el) } this.header.bind("dblclick", jQuery.proxy(this.maximizeRestoreHandler_Window, this)) } } Alipw.Window.superclass.renderHeaderBtns.apply(this, arguments) }, center: function () { var d = jQuery(window); var b = this.getWidth(); var c = this.getHeight(); var a = parseInt((d.width() - b) / 2); var e = parseInt((d.height() - c) / 2); if (a < 10) { a = 10 } if (e < 10) { e = 10 } if (this.position == "fixed") { this.setPosition(a, e) } else { this.setPosition(a + d.scrollLeft(), e + d.scrollTop()) } }, minimize: function (a) { if (a) { this.animationProxy.animate(this, this.taskbar.getBarItemByWindow(this), 0.3, 0.1, 300) } this.remove(); this.taskbar.getBarItemByWindow(this).deactivate(); this.minimized = true }, maximize: function () { this._storage_for_restore = [this.getX(), this.getY(), this.width, this.height]; this.maximized = true; this.maximizeBtn.el.removeClass("alipw-panel-btn-max"); this.maximizeBtn.el.addClass("alipw-panel-btn-restore"); this.maximizeBtn.setIconCls("icon-alipw-panel-restoreBtn"); if (this.shadow) { this.shadow.disable() } if (this.dragSupporter) { this.dragSupporter.disable() } this.setPosition(0, 0); this.setWidth(jQuery(window).width()); this.setHeight(jQuery(window).height()); if (this.resizeSupporter) { this.resizeSupporter.disable() } }, restore: function (a) { if (this.minimized) { this.minimized = false; this.render(); if (a) { this.setVisible(false, true); var b = this; this.animationProxy.animate(this.taskbar.getBarItemByWindow(this), this, 0.3, 0.1, 300, function () { b.setVisible(true) }) } else { this.setVisible(true) } } else { if (this.maximized) { this.maximized = false; this.maximizeBtn.el.removeClass("alipw-panel-btn-restore"); this.maximizeBtn.el.addClass("alipw-panel-btn-max"); this.maximizeBtn.setIconCls("icon-alipw-panel-maximizeBtn"); if (this.shadow) { this.shadow.enable() } if (this.dragSupporter) { this.dragSupporter.enable() } this.setPosition(this._storage_for_restore[0], this._storage_for_restore[1]); this.setWidth(this._storage_for_restore[2]); this.setHeight(this._storage_for_restore[3]); if (this.resizeSupporter) { this.resizeSupporter.enable() } } } }, maximizeRestoreHandler_Window: function () { if (this.maximized) { this.restore(this.animated) } else { this.maximize(this.animated) } }, minimizeHandler_Window: function () { this.minimize(this.animated) }, completeHandler_Window: function () { if (!this.initPosition) { this.center() } else { if (this.initPosition instanceof Array) { this.setPosition(this.initPosition[0], this.initPosition[1]) } } this.addEventListener("mousedown", this.mouseDownHandler_Window, this, true); var a = Alipw.createFuncProxy(this.resizeHandler_Window, this); jQuery(window).bind("resize", a); this.addEventListener("destroy", function () { jQuery(window).unbind("resize", a) }, this) }, visibilityChangeHandler_Window: function (a) { if (this.modalOverlay) { this.modalOverlay.setVisible(this.visible) } }, moveHandler_Window: function () { if (this.modalOverlay) { this.modalOverlay.setPosition(null, null, this.zIndex - 2) } }, resizeHandler_Window: function () { if (this.maximized) { this.setWidth(jQuery(window).width()); this.setHeight(jQuery(window).height()) } if (!this.maximized && this.autoCenter) { var a = this; clearTimeout(this.centerTimer); this.centerTimer = setTimeout(function () { a.center() }, 10) } }, mouseDownHandler_Window: function (b, a) { Alipw.ComponentManager.bringToFront(this) }, dragEndHandler_Window: function (b, a) { this.setPosition(a.left, a.top) }, dragHandler_Window: function (b, a) { }, getDragEl_Window: function () { if (this.showHeader && this.header) { return this.header } else { if (!this.showHeader && this.body) { return this.body } } } }); Alipw.Msg = function () { var b = function (r, c, q, h, s, f) { var j = { title: "Message", buttonAlign: "right" }; var m = new Alipw.Template(['<div class="alipw-msg">', '<div class="alipw-msg-text">', "{$msg}", '<div class="alipw-msg-icon {$iconCls}"></div>', "</div>", "</div>"]).set({ msg: c, iconCls: s.iconCls }).html; var p = jQuery.extend(j, h, { html: m, title: r, resizable: false, autoCenter: true, autoRender: false }); var o = new Alipw.Window(p); o.setVisible(false, true); o.render(); if (f instanceof Array) { for (var k = 0, n = f.length; k < n; k++) { var l = o.addButtons(f[k]); l.addEventListener("click", function (i) { if (typeof (q) == "function") { q(this._callbackToken) } o.close() }, l, true) } } var e = o.el.find(".alipw-msg"); e.css("white-space", "nowrap"); o.body.css("overflow", "hidden"); if (e.width() > s.textMaxWidth) { e.width(s.textMaxWidth); e.css("white-space", "") } else { if (e.width() < s.textMinWidth) { e.width(s.textMinWidth); e.css("white-space", "") } } var d = o.getWidthByBody(e.outerWidth()); var g = o.getHeightByBody(e.outerHeight()); o.setSize(d, g); o.center(); Alipw.ComponentManager.bringToFront(o); o.setVisible(true); return o }; var a = { alert: function (k, c, j, d) { if (typeof arguments[0] == "object") { var h = arguments[0], k = h.title || "提醒", c = h.msg, j = h.fn, d = h.config } if (typeof (d) != "object") { d = new Object() } var l = { OKText: d.OKText || "OK", iconCls: d.iconCls || "alipw-icon-msg-warning", textMaxWidth: d.textMaxWidth || 500, textMinWidth: d.textMinWidth || 150 }; for (var f in l) { delete d[f] } d = jQuery.extend({ modal: true }, d); var e = [{ label: l.OKText, _callbackToken: "OK"}]; var g = b(k, c, j, d, l, e); return g }, prompt: function (f, e, d, c) { }, confirm: function (j, h, f, c) { if (typeof (c) != "object") { c = new Object() } var k = { yesText: c.yesText || "Yes", noText: c.noText || "No", iconCls: c.iconCls || "alipw-icon-msg-question", textMaxWidth: c.textMaxWidth || 500, textMinWidth: c.textMinWidth || 150 }; for (var d in k) { delete c[d] } c = jQuery.extend({ modal: true }, c); var e = [{ label: k.yesText, _callbackToken: "yes" }, { label: k.noText, _callbackToken: "no"}]; var g = b(j, h, f, c, k, e); return g }, tip: function (f, c) { if (typeof (c) != "object") { c = new Object() } var g = { iconCls: c.iconCls || "alipw-icon-msg-success", textMaxWidth: c.textMaxWidth || 500, textMinWidth: c.textMinWidth || 150, timeout: function () { if (c.timeout === 0) { return 100000000000000 } else { if (!c.timeout) { return 2000 } else { return c.timeout } } } () }; for (var d in g) { delete c[d] } c = jQuery.extend({ showHeader: false, modal: false, draggable: false }, c); var e = b("", f, null, c, g); setTimeout(function () { e.close() }, g.timeout); return e } }; return a } ();
    Alipw.Config.set('Alipw.Window', {
        showShadow: false,
        buttonGap: 15,
        cls: 'aliyun-standard-window'
    });

    Alipw.Config.set('Alipw.Button', {
        height: 25,
        cls: 'aliyun-standard-button'
    });

    Alipw.Config.set('Alipw.ComboBox', {
        height: 25,
        cls: 'aliyun-standard-combo',
        overCls: 'aliyun-standard-combo-over',
        downCls: 'aliyun-standard-combo-down',
        expandedCls: 'aliyun-standard-combo-expanded',
        listCls: 'aliyun-standard-combo-list',
        listAboveCls: 'aliyun-standard-combo-list-above',
        listUnderneathCls: 'aliyun-standard-combo-list-underneath'
    });

    Alipw.Config.set('Alipw.Slider', {
        cls: 'aliyun-standard-slider'
    });

    Alipw.Config.set('Alipw.Scrollbar', {
        cls: 'aliyun-standard-scrollbar'
    });

    Alipw.Config.set('Alipw.ToolTip', {
        cls: 'aliyun-standard-tooltip'
    });
    window.Alipw = module.exports = Alipw;
});

